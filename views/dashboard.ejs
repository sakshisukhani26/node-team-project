<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>User Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <style>
      body {
        background: linear-gradient(to left, #b1c1f7, #9f9e9e);
        color: #fff;
      }

      .navbar-custom {
        background: linear-gradient(to right, #c9d6ff, #e2e2e2);
        border-bottom: 1px solid #b5b5b5;
        padding: 0 30px;
      }

      .welcome-text {
        font-weight: bold;
        font-size: 1.25rem;
        color: #333;
      }
      .formsContainer {
        margin-top: 80px;
      }

      .form-card {
        margin-top: 100px;
      }

      .form-preview {
        max-height: 200px;
        overflow-y: auto;
      }

      .form-preview:hover {
        transform: scale(1.03);
        transition: 0.3s ease;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
      }

      .clickable-card {
        cursor: pointer;
        transition: 0.3s ease;
      }

      .clickable-card:hover {
        transform: scale(1.02);
      }

      .clickable-card input,
      .clickable-card select {
        pointer-events: none;
        background-color: #f8f9fa;
      }

      .modal-content {
        color: #000;
      }

      .modal-body {
        max-height: 60vh;
        overflow-y: auto;
      }

      .btn-hover-primary:hover {
        background-color: #0d6efd;
        color: #fff;
        border-color: #0d6efd;
        transform: scale(1.05);
        transition: all 0.3s ease;
      }
    </style>
  </head>

  <body>
    <nav
      class="navbar navbar-expand-lg navbar-light shadow-sm mb-4 navbar-custom"
    >
      <div
        class="container-fluid d-flex justify-content-between align-items-center"
      >
        <div class="d-flex align-items-center">
          <a class="navbar-brand d-flex align-items-center" href="#">
            <img
              src="/images/logo.png"
              alt="Logo"
              width="60"
              height="60"
              class="me-2"
            />
            <span class="welcome-text">Hello, <%= user.firstName %>!</span>
          </a>
        </div>
        <div>
          <a
            href="/logout"
            class="btn btn-outline-primary rounded-pill px-4 py-2 fw-semibold btn-hover-primary"
            >Logout</a
          >
        </div>
      </div>
    </nav>

    <div class="container">
      <div class="row formsContainer" id="formsContainer"></div>
    </div>

    <div id="modalsContainer"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      async function fetchForms() {
        const response = await fetch("/api/forms");
        const formsList = await response.json();

        const formsContainer = document.getElementById("formsContainer");
        const modalsContainer = document.getElementById("modalsContainer");

        formsList.forEach((form, index) => {
          // Create card
          const colDiv = document.createElement("div");
          colDiv.className = "col-md-4 mb-4";

          const formCard = document.createElement("div");
          formCard.className = "card clickable-card shadow-sm";
          formCard.setAttribute("data-bs-toggle", "modal");
          formCard.setAttribute("data-bs-target", `#formModal${index}`);

          const cardBody = document.createElement("div");
          cardBody.className = "card-body";

          const formTitle = document.createElement("h5");
          formTitle.className = "card-title";
          formTitle.textContent = form.formTitle;

          const formPreview = document.createElement("div");
          formPreview.className = "form-preview";

          form.formData.slice(0, 3).forEach((field) => {
            const inputGroup = document.createElement("div");
            inputGroup.className = "mb-2";

            const fieldLabel = document.createElement("label");
            fieldLabel.className = "form-label";
            fieldLabel.textContent = field.question;

            const fieldInput = document.createElement("input");
            fieldInput.className = "form-control";
            fieldInput.placeholder = field.placeholder;
            fieldInput.disabled = true;

            inputGroup.appendChild(fieldLabel);
            inputGroup.appendChild(fieldInput);
            formPreview.appendChild(inputGroup);
          });

          cardBody.appendChild(formTitle);
          cardBody.appendChild(formPreview);
          formCard.appendChild(cardBody);
          colDiv.appendChild(formCard);
          formsContainer.appendChild(colDiv);

          // Create modal
          const modalDiv = document.createElement("div");
          modalDiv.className = "modal fade";
          modalDiv.id = `formModal${index}`;
          modalDiv.tabIndex = -1;

          modalDiv.innerHTML = `
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title">${form.formTitle}</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <form id="userForm-${index}">
                  ${form.formData
                    .map((field) => {
                      if (field.type === "dropdown" && field.options) {
                        return `
                        <div class="mb-3">
                          <label class="form-label">${field.question}</label>
                          <select class="form-select" name="${
                            field.name
                          }" required>
                            ${field.options
                              .map(
                                (option) =>
                                  `<option value="${option}">${option}</option>`
                              )
                              .join("")}
                          </select>
                        </div>`;
                      } else if (field.type === "radio" && field.options) {
                        return `
                        <div class="mb-3">
                          <label class="form-label d-block">${
                            field.question
                          }</label>
                          ${field.options
                            .map(
                              (option) => `
                            <div class="form-check form-check-inline">
                              <input class="form-check-input" type="radio" name="${field.name}" id="${field.name}-${option}" value="${option}" required>
                              <label class="form-check-label" for="${field.name}-${option}">${option}</label>
                            </div>`
                            )
                            .join("")}
                        </div>`;
                      } else {
                        return `
                        <div class="mb-3">
                          <label class="form-label">${field.question}</label>
                          <input type="text" class="form-control" name="${
                            field.name
                          }" placeholder="${field.placeholder}" ${
                          field.validation?.includes("required")
                            ? "required"
                            : ""
                        }>
                        </div>`;
                      }
                    })
                    .join("")}
                  <button type="submit" class="btn btn-primary w-100">Submit</button>
                </form>
              </div>
            </div>
          </div>
        `;

          modalsContainer.appendChild(modalDiv);

          // Handle form submission
          setTimeout(() => {
            const userForm = document.getElementById(`userForm-${index}`);
            userForm.addEventListener("submit", async (event) => {
              event.preventDefault();

              const formData = new FormData(userForm);
              const formEntries = Object.fromEntries(formData.entries());

              try {
                const submitResponse = await fetch("/submit-form", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    formId: form._id,
                    formTitle: form.formTitle,
                    answers: formEntries,
                  }),
                });

                const result = await submitResponse.json();

                if (submitResponse.ok) {
                  alert(`"${form.formTitle}" submitted successfully!`);
                  window.location.href = "/dashboard";
                } else {
                  throw new Error(result.message || "Form submission failed.");
                }
              } catch (err) {
                console.error("Error submitting form:", err);
                alert(
                  "There was a problem submitting the form. Please try again."
                );
              }
            });
          }, 0);
        });
      }

      fetchForms();
    </script>
  </body>
</html>
